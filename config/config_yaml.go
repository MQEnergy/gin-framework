// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// config.dev.yaml
// config.prod.yaml
// config.test.yaml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDevYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x4f\xdb\x58\x14\xdd\xfb\x57\x3c\xc1\xc2\xab\x24\x86\x40\x98\x78\x87\x66\x46\x23\x04\x62\x32\xc3\xcc\x08\xb1\x41\x4e\x7c\xe3\x3c\x62\xfb\x25\xef\xd9\x90\xb0\x62\x91\xe1\xa3\x52\x0a\x2a\x49\x43\x29\x2d\x20\x81\xa0\x0b\x02\xad\x5a\x40\x10\xe0\xcf\xc4\x76\xb2\xe2\x2f\x54\xcf\x76\x48\x55\xa1\x76\x97\x7b\x73\xee\xc9\x39\xe7\x9d\x30\xa0\x8b\x40\x65\x01\x21\x83\xa8\x20\x23\x51\x85\xb4\xad\x89\x02\x42\x2a\x64\x15\x5b\xb7\x52\x8a\x06\x33\x78\x19\x64\x34\x24\xa1\x41\xd4\xbd\xdd\xe9\x34\x8f\x9c\xf5\xd5\xee\xe1\x17\xf7\xdd\xa1\x5b\xbf\xe0\xa7\x4a\xa9\x0f\x1b\x95\x24\x84\x10\x1a\x44\xee\xde\x8a\x73\x74\xf2\x1d\x34\x8b\x75\xf8\xb7\xa0\x13\x45\x4d\x29\x56\x4e\x46\x62\x34\x26\x72\xec\xeb\xb5\xf6\xed\x65\xfb\xfa\x45\xbb\x75\xd0\xb9\x3a\x77\xee\x2b\xc2\xc2\x92\xc5\x65\x59\x24\x0f\xe6\xef\xa5\x02\xa6\x20\xa3\x5f\x12\x23\x92\x4f\x3f\x18\xec\x3b\x0f\x6b\xee\xde\xbe\xdb\xb8\xec\x36\x3e\xf7\xb0\x93\x50\x96\x91\x38\x6e\x5b\x39\x42\xf1\xb2\x62\x61\x62\x8a\x3d\xbc\xb7\x5b\xe9\xd6\x9a\xce\x56\xb5\x07\x9e\x60\xcc\x06\x2a\x23\x51\xc3\x66\x24\x4b\x15\x03\x96\x08\xcd\x73\xfb\x0c\x32\x14\x2c\x19\x89\xf1\x85\xbf\x66\xfe\x9e\x9b\x85\xd9\x65\x2a\x25\x73\x45\xe9\x0f\x3a\x67\x4f\x25\x7f\xd3\xac\xfc\xf0\xec\x7f\xc9\xf1\x92\x28\xe8\x44\x93\xfd\xc0\xd2\xb6\x26\x23\x8b\xda\x10\x1a\x9d\x56\x0c\x1e\xa9\x51\x04\x13\xa8\x56\x8e\x68\xc4\xf7\xda\x38\x76\x1e\x1a\x81\x63\x67\xab\xea\x9d\xf0\x5c\x54\x4c\xc3\x40\xa8\x6d\x5a\xd8\x80\x98\x4e\x34\xd6\x87\x87\xb9\x9f\xed\xb8\xb5\x7b\xef\x6d\xd3\xb9\xab\x0b\x46\x99\x15\x75\xfe\xc3\x11\x94\x23\x8c\x4b\x1d\x1a\x1e\x8b\x4a\x51\x29\x3a\xc4\x0d\x20\x54\x20\xd4\x37\x10\x97\x12\xc1\xc2\x66\xbe\x57\x4a\x88\x15\x22\x14\xc6\x96\x08\x55\xfd\xdb\xf8\xc8\x68\x88\x53\xd3\x66\xa0\xdc\x02\xd6\x43\x52\xc8\xe2\x92\x8c\x06\x06\xfc\xd1\x50\x4a\x13\xaa\x0e\xbf\x12\xd3\x64\x61\x33\x3a\xcd\x7b\xef\xae\xe9\x7d\xb8\xe9\x36\x3e\x75\x1e\xde\xbb\x2f\x8f\xdd\x8f\x07\xed\xeb\xb3\xe0\xb3\xb7\x5b\x09\xfa\xe0\xd6\x2f\xba\x6b\x9b\x3d\x92\x3f\x0b\x60\x3e\x91\xf4\x59\xdc\x8d\x6d\xa7\xb5\xe2\xd6\x2f\xdc\x6a\xd3\xb9\xd9\xfe\x21\xc5\x14\xce\xc2\x3f\x98\xcb\x4d\xf4\x09\xda\x37\xab\xc1\x91\xb3\x79\xee\x1c\x55\xbd\xda\x69\xff\xda\x6f\xcb\x63\x6b\x9d\x37\xf3\xd5\xfe\x63\x6b\x43\xa0\xa0\x62\xc6\x93\x7c\x2e\xc7\x30\xc5\x44\x7c\x2c\xe9\x8f\xcf\x45\xa6\xa6\xa7\x6d\x43\x46\x92\x80\x90\x4e\x34\x6c\xa6\xc2\xb4\x78\xad\xe6\x9f\x6a\x35\xef\x7f\x37\xcf\x1f\xd5\x7b\x73\xeb\xdc\xd5\xbd\xda\xa9\xbb\x7e\xe5\x9c\xed\x38\xff\x1f\xfb\x1a\x82\x72\x7a\xbb\x15\x67\xa3\xea\xb5\x56\x04\xc5\x28\x16\x7e\xa2\x6b\x34\x31\x36\xcc\xc7\xf0\x6d\x35\x3b\x7c\xb2\x6f\x74\xf2\x71\x31\xa4\x10\x05\xc2\x7c\xab\x60\xaa\x29\x82\x4d\xbe\xcb\x59\x56\x81\xc9\xb1\x18\x61\x2c\x92\x31\x23\x2c\xa7\x98\x5a\x4e\xc1\x51\x45\xc7\x65\xdb\xcc\xb0\x68\x86\x18\x9c\x43\xc9\x64\x80\xb1\x49\x28\x4f\xf4\x58\x9f\x36\x33\xbd\x7f\x0b\xdf\xa6\xed\x4c\x1e\xac\xb0\xfc\xa2\xf0\x35\x00\x00\xff\xff\x57\x64\xea\x88\x63\x04\x00\x00")

func configDevYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDevYaml,
		"config.dev.yaml",
	)
}

func configDevYaml() (*asset, error) {
	bytes, err := configDevYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.dev.yaml", size: 1123, mode: os.FileMode(420), modTime: time.Unix(1660746185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configProdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x4f\xdb\x40\x14\xbc\xfb\x57\xac\xe0\xe0\x53\x12\x43\x20\x34\xbe\xa1\xb6\xaa\x10\x88\xa6\xa5\xad\x10\x17\xe4\xc4\x1b\x67\x89\xbd\x9b\xec\xda\x90\x70\xe2\x90\xf2\x51\x29\x05\x95\xa4\xa1\x94\x16\x90\x40\xd0\x03\x81\x56\x2d\x20\x08\xf0\x67\x62\x3b\x39\xf1\x17\xaa\xb5\x1d\x22\x10\x6a\x6f\x7e\xcf\xf3\x66\x67\x66\xdf\x32\x48\x67\x21\x95\x05\x00\x0c\xa2\x42\x19\x88\x2a\x4c\x5a\x9a\x28\x00\xa0\xc2\xb4\x62\xe9\x66\x42\xd1\xe0\x04\x9a\x87\x32\xe8\x93\x40\x2f\x68\x5f\x6e\xb4\xea\x7b\xf6\xf2\x62\x7b\xf7\x8f\xf3\x6d\xd7\xa9\x9e\xf0\x51\xa5\xd0\x85\x0d\x4a\x12\x00\x00\xf4\x02\x67\x6b\xc1\xde\x3b\x78\x00\x4d\x23\x1d\xbe\xcd\xe9\x44\x51\x13\x8a\x99\x91\x81\x18\x8e\x88\x1c\xfb\x79\xa9\x79\x79\xda\x3c\xff\xd0\x6c\xec\xb4\xce\x8e\xed\xeb\x92\x30\x33\x67\x72\x59\x26\xc9\x42\xfc\xbc\x90\x43\x14\xca\xe0\x49\x6c\x40\xf2\xe8\x7b\xfd\x7e\xeb\x66\xc9\xd9\xda\x76\x6a\xa7\xed\xda\xef\x0e\x76\x14\x16\x65\x20\x0e\x5b\x66\x86\x50\x34\xaf\x98\x88\x60\xb1\x83\x77\x37\x4b\xed\x4a\xdd\x5e\x2b\x77\xc0\x23\x8c\x59\x90\xca\x40\xd4\x10\x0e\xa5\xa9\x62\xc0\x39\x42\xb3\xdc\x3e\x83\x29\x0a\x4d\x19\x88\xd1\x99\x57\x13\xaf\xa7\x26\xe1\xe4\x3c\x95\xe2\x99\xbc\xf4\x82\x4e\x59\x63\xf1\x67\x9a\x99\xed\x9f\x7c\x17\x1f\x2e\x88\x82\x4e\x34\xd9\x0b\x2c\x69\x69\x32\x30\xa9\x05\x03\xa3\xe3\x8a\xc1\x23\x35\xf2\x10\x43\xaa\x15\x43\x1a\xf1\xbc\xd6\xf6\xed\x9b\x9a\xef\xd8\x5e\x2b\xbb\x07\x3c\x17\x15\xd1\x20\x10\x6a\x61\x13\x19\x30\xa2\x13\x8d\x75\xe1\x41\xee\x47\x1b\x4e\xe5\xda\xfd\x5a\xb7\xaf\xaa\x82\x51\x64\x79\x9d\x1f\x1c\x02\x19\xc2\xb8\xd4\xbe\xfe\xa1\xb0\x14\x96\xc2\x7d\xdc\x00\x00\x39\x42\x3d\x03\x51\x29\xe6\x37\x2c\xe6\x79\xa5\x84\x98\x01\x42\x61\x6c\x8e\x50\xd5\x9b\x8d\x0e\x0c\x06\x38\x35\x89\x7d\xe5\x1a\xc2\xd3\xf7\x52\x01\x20\x47\x61\x1a\x15\x64\xd0\xd3\xe3\x95\x86\x52\x18\x51\x75\xf8\x94\x60\xcc\x82\x15\x69\xd5\xaf\xdd\xab\xba\xfb\xe3\xa2\x5d\xfb\xd5\xba\xf9\xee\x7c\xdc\x77\x7e\xee\x34\xcf\x8f\xfc\x6f\x77\xb3\xe4\x2f\x86\x53\x3d\x69\x2f\xad\x76\x48\x5e\xe6\x20\xbe\x23\xe9\xb2\x38\x2b\xeb\x76\x63\xc1\xa9\x9e\x38\xe5\xba\x7d\xb1\xfe\x4f\x8a\x31\x94\x86\x6f\x10\xd7\x1d\xeb\x12\x34\x2f\x16\xfd\x21\x7b\xf5\xd8\xde\x2b\xbb\x95\xc3\xee\xb4\xb7\x36\xb7\x8d\x65\xbe\xa2\x9f\xb6\x6f\x1b\x2b\x02\x85\x2a\x62\x3c\xd2\xc7\x02\x0d\xe2\x8c\x45\x87\xe2\x5e\xf9\x58\x76\x6a\x72\xdc\x32\x64\x20\x09\x00\xe8\x44\x43\x38\x11\xa4\x75\x3f\xc9\x69\xef\xdf\x34\xbf\x5d\xf7\xcb\xa5\x7d\x55\x75\x2b\x87\xce\xf2\x99\x7d\xb4\x61\xbf\xdf\xf7\x34\xf8\x5b\xea\x6e\x96\xec\x95\xb2\xdb\x58\x10\x14\x23\x9f\xfb\x8f\xae\xc1\xd8\x50\x3f\x2f\x83\x4b\xd6\x2c\xc8\xcc\x07\x3a\x79\x39\x1b\x50\x88\x02\x61\x9e\x55\x88\xd5\x04\x41\x98\xf7\x32\xa6\x99\x63\x72\x24\x42\x18\x0b\xa5\x70\x88\x65\x14\xac\x65\x14\x14\x56\x74\x54\xb4\x70\x8a\x85\x53\xc4\xe0\x1c\x4a\x2a\x05\x19\x1b\x85\xc5\x91\x0e\xeb\x5d\x67\xa2\xf3\x6c\x78\x37\x69\xa5\xb2\xd0\x0c\x5e\x81\x28\xfc\x0d\x00\x00\xff\xff\x8c\x34\x9a\x3d\x6c\x04\x00\x00")

func configProdYamlBytes() ([]byte, error) {
	return bindataRead(
		_configProdYaml,
		"config.prod.yaml",
	)
}

func configProdYaml() (*asset, error) {
	bytes, err := configProdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.prod.yaml", size: 1132, mode: os.FileMode(420), modTime: time.Unix(1660317416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configTestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x4f\xdb\x40\x14\xbc\xfb\x57\xac\xe0\xe0\x53\x12\x43\x20\x34\xbe\xa1\xb6\xaa\x10\x88\xa6\xa5\xad\x10\x17\xe4\xc4\x1b\x67\x89\xbd\x9b\xec\xda\x90\x70\xe2\x90\xf2\x51\x29\x05\x95\xa4\xa1\x94\x16\x90\x40\xd0\x03\x81\x56\x2d\x20\x08\xf0\x67\x62\x3b\x39\xf1\x17\xaa\xb5\x1d\x22\x10\x6a\x6f\x7e\xcf\xf3\x66\x67\x66\xdf\x32\x48\x67\x21\x95\x05\x00\x0c\xa2\x42\x19\x88\x2a\x4c\x5a\x9a\x28\x00\xa0\xc2\xb4\x62\xe9\x66\x42\xd1\xe0\x04\x9a\x87\x32\xe8\x93\x40\x2f\x68\x5f\x6e\xb4\xea\x7b\xf6\xf2\x62\x7b\xf7\x8f\xf3\x6d\xd7\xa9\x9e\xf0\x51\xa5\xd0\x85\x0d\x4a\x12\x00\x00\xf4\x02\x67\x6b\xc1\xde\x3b\x78\x00\x4d\x23\x1d\xbe\xcd\xe9\x44\x51\x13\x8a\x99\x91\x81\x18\x8e\x88\x1c\xfb\x79\xa9\x79\x79\xda\x3c\xff\xd0\x6c\xec\xb4\xce\x8e\xed\xeb\x92\x30\x33\x67\x72\x59\x26\xc9\x42\xfc\xbc\x90\x43\x14\xca\xe0\x49\x6c\x40\xf2\xe8\x7b\xfd\x7e\xeb\x66\xc9\xd9\xda\x76\x6a\xa7\xed\xda\xef\x0e\x76\x14\x16\x65\x20\x0e\x5b\x66\x86\x50\x34\xaf\x98\x88\x60\xb1\x83\x77\x37\x4b\xed\x4a\xdd\x5e\x2b\x77\xc0\x23\x8c\x59\x90\xca\x40\xd4\x10\x0e\xa5\xa9\x62\xc0\x39\x42\xb3\xdc\x3e\x83\x29\x0a\x4d\x19\x88\xd1\x99\x57\x13\xaf\xa7\x26\xe1\xe4\x3c\x95\xe2\x99\xbc\xf4\x82\x4e\x59\x63\xf1\x67\x9a\x99\xed\x9f\x7c\x17\x1f\x2e\x88\x82\x4e\x34\xd9\x0b\x2c\x69\x69\x32\x30\xa9\x05\x03\xa3\xe3\x8a\xc1\x23\x35\xf2\x10\x43\xaa\x15\x43\x1a\xf1\xbc\xd6\xf6\xed\x9b\x9a\xef\xd8\x5e\x2b\xbb\x07\x3c\x17\x15\xd1\x20\x10\x6a\x61\x13\x19\x30\xa2\x13\x8d\x75\xe1\x41\xee\x47\x1b\x4e\xe5\xda\xfd\x5a\xb7\xaf\xaa\x82\x51\x64\x79\x9d\x1f\x1c\x02\x19\xc2\xb8\xd4\xbe\xfe\xa1\xb0\x14\x96\xc2\x7d\xdc\x00\x00\x39\x42\x3d\x03\x51\x29\xe6\x37\x2c\xe6\x79\xa5\x84\x98\x01\x42\x61\x6c\x8e\x50\xd5\x9b\x8d\x0e\x0c\x06\x38\x35\x89\x7d\xe5\x1a\xc2\xd3\xf7\x52\x01\x20\x47\x61\x1a\x15\x64\xd0\xd3\xe3\x95\x86\x52\x18\x51\x75\xf8\x94\x60\xcc\x82\x15\x69\xd5\xaf\xdd\xab\xba\xfb\xe3\xa2\x5d\xfb\xd5\xba\xf9\xee\x7c\xdc\x77\x7e\xee\x34\xcf\x8f\xfc\x6f\x77\xb3\xe4\x2f\x86\x53\x3d\x69\x2f\xad\x76\x48\x5e\xe6\x20\xbe\x23\xe9\xb2\x38\x2b\xeb\x76\x63\xc1\xa9\x9e\x38\xe5\xba\x7d\xb1\xfe\x4f\x8a\x31\x94\x86\x6f\x10\xd7\x1d\xeb\x12\x34\x2f\x16\xfd\x21\x7b\xf5\xd8\xde\x2b\xbb\x95\xc3\xee\xb4\xb7\x36\xb7\x8d\x65\xbe\xa2\x9f\xb6\x6f\x1b\x2b\x02\x85\x2a\x62\x3c\xd2\xc7\x02\x0d\xe2\x8c\x45\x87\xe2\x5e\xf9\x58\x76\x6a\x72\xdc\x32\x64\x20\x09\x00\xe8\x44\x43\x38\x11\xa4\x75\x3f\xc9\x69\xef\xdf\x34\xbf\x5d\xf7\xcb\xa5\x7d\x55\x75\x2b\x87\xce\xf2\x99\x7d\xb4\x61\xbf\xdf\xf7\x34\xf8\x5b\xea\x6e\x96\xec\x95\xb2\xdb\x58\x10\x14\x23\x9f\xfb\x8f\xae\xc1\xd8\x50\x3f\x2f\x83\x4b\xd6\x2c\xc8\xcc\x07\x3a\x79\x39\x1b\x50\x88\x02\x61\x9e\x55\x88\xd5\x04\x41\x98\xf7\x32\xa6\x99\x63\x72\x24\x42\x18\x0b\xa5\x70\x88\x65\x14\xac\x65\x14\x14\x56\x74\x54\xb4\x70\x8a\x85\x53\xc4\xe0\x1c\x4a\x2a\x05\x19\x1b\x85\xc5\x91\x0e\xeb\x5d\x67\xa2\xf3\x6c\x78\x37\x69\xa5\xb2\xd0\x0c\x5e\x81\x28\xfc\x0d\x00\x00\xff\xff\x8c\x34\x9a\x3d\x6c\x04\x00\x00")

func configTestYamlBytes() ([]byte, error) {
	return bindataRead(
		_configTestYaml,
		"config.test.yaml",
	)
}

func configTestYaml() (*asset, error) {
	bytes, err := configTestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.test.yaml", size: 1132, mode: os.FileMode(420), modTime: time.Unix(1660317421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.dev.yaml":  configDevYaml,
	"config.prod.yaml": configProdYaml,
	"config.test.yaml": configTestYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.dev.yaml":  &bintree{configDevYaml, map[string]*bintree{}},
	"config.prod.yaml": &bintree{configProdYaml, map[string]*bintree{}},
	"config.test.yaml": &bintree{configTestYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
