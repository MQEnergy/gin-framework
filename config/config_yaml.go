// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// config.dev.yaml
// config.prod.yaml
// config.test.yaml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDevYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x4f\xeb\x46\x14\xdd\xfb\x57\x8c\x1e\x0b\xaf\xe2\x38\xdf\x2f\xde\x3d\xbd\x56\x15\x02\xbd\xa6\xa5\xad\xa2\xb7\x41\x4e\x3c\x71\xe6\xc5\x9e\x49\x66\x6c\x48\xb2\x62\x91\xf2\x51\x29\x05\x95\xa4\xa1\x94\x16\x90\x40\xd0\x05\x81\x56\x2d\x20\x08\xf0\x67\x62\x3b\x59\xf1\x17\xaa\xb1\x9d\x06\x10\xea\xce\xf7\xfa\xdc\x33\xe7\x9c\xb9\xc3\x20\x5d\x82\x54\x11\x00\x30\x89\x06\x15\x20\x6a\xb0\x60\xeb\xa2\x00\x80\x06\x4b\xaa\x6d\x58\x39\x55\x87\x0b\xa8\x09\x15\x10\x93\xc1\x0c\x18\xdf\xee\x8c\xfa\x47\xce\xfa\xea\xf8\xf0\x1f\xf7\xb7\x43\xb7\x7b\xc1\x47\xd5\xfa\x14\x96\x92\x65\x00\x00\x98\x01\xee\xde\x8a\x73\x74\xf2\x02\x5a\x42\x06\xfc\xb6\x6a\x10\x55\xcb\xa9\x56\x59\x01\xa2\x14\x15\x39\xf6\xe7\xb5\xe1\xed\xe5\xf0\xfa\x87\xe1\xe0\x60\x74\x75\xee\xdc\xb7\x84\x4f\xcb\x16\x97\x65\x91\x0a\xc4\x9f\xd7\xab\x88\x42\x05\xbc\x4d\x27\x65\x9f\x7e\x26\xe8\x8f\x1e\xd6\xdc\xbd\x7d\xb7\x77\x39\xee\xfd\x3d\xc1\xce\xc1\x86\x02\xc4\x77\xb6\x55\x26\x14\x35\x55\x0b\x11\x2c\x4e\xf0\xde\x6e\x6b\xdc\xe9\x3b\x5b\xed\x09\x78\x96\x31\x1b\x52\x05\x88\x3a\xc2\x91\x12\x55\x4d\xb8\x4c\x68\x85\xdb\x67\xb0\x48\xa1\xa5\x00\x31\xf1\xe9\xab\x85\xaf\x3f\xe6\x61\xbe\x49\xe5\x6c\xb9\x26\x7f\x41\x3f\xda\xf3\xd9\xcf\x74\xab\x12\xcf\x7f\x97\x7d\x57\x17\x05\x83\xe8\x8a\x1f\x58\xc1\xd6\x15\x60\x51\x1b\x86\x46\x3f\xa8\x26\x8f\xd4\xac\x41\x0c\xa9\xde\x88\xe8\xc4\xf7\xda\x3b\x76\x1e\x7a\x81\x63\x67\xab\xed\x9d\xf0\x5c\x34\x44\xc3\x40\xa8\x8d\x2d\x64\xc2\xa8\x41\x74\x36\x85\x87\xb9\x9f\xed\xb8\x9d\x7b\xef\xd7\xbe\x73\xd7\x15\xcc\x06\xab\x19\xfc\xe0\x08\x28\x13\xc6\xa5\xc6\xe2\x19\x49\x96\x64\x29\xc6\x0d\x00\x50\x25\xd4\x37\x90\x90\xd3\x41\xc3\x66\xbe\x57\x4a\x88\x15\x22\x54\xc6\x96\x09\xd5\xfc\xd9\x44\x32\x15\xe2\xb4\x02\x0e\x94\xeb\x08\x2f\x3e\x4b\x05\x80\x2a\x85\x25\x54\x57\xc0\x9b\x37\x7e\x69\xaa\xf5\x59\xcd\x80\xef\x09\xc6\x2c\x5c\x91\x51\xff\xde\xbb\xeb\x7b\x7f\xdc\x8c\x7b\x7f\x8d\x1e\x7e\x77\x7f\x3c\x76\xff\x3c\x18\x5e\x9f\x05\xdf\xde\x6e\x2b\x58\x0c\xb7\x7b\x31\x5e\xdb\x9c\x90\x7c\x59\x85\xf8\x3f\x92\x29\x8b\xbb\xb1\xed\x0c\x56\xdc\xee\x85\xdb\xee\x3b\x37\xdb\xff\x4b\x31\x8f\x4a\xf0\x1b\xc4\x75\xa7\xa7\x04\xc3\x9b\xd5\x60\xc8\xd9\x3c\x77\x8e\xda\x5e\xe7\x74\x3a\xed\xaf\xcd\xe3\x60\x9d\xaf\xe8\x4f\xfb\x8f\x83\x0d\x81\x42\x0d\x31\x1e\xe9\x6b\x81\x86\x71\xa6\x13\x99\xac\x5f\xbe\x96\x9d\x56\xf8\x60\x9b\x0a\x90\x05\x00\x0c\xa2\x23\x9c\x0b\xd3\x7a\x9e\xe4\xa2\xff\x6f\x91\xdf\xae\xf7\xcb\xad\x73\xd7\xf5\x3a\xa7\xee\xfa\x95\x73\xb6\xe3\x7c\x7f\xec\x6b\x08\xb6\xd4\xdb\x6d\x39\x1b\x6d\x6f\xb0\x22\xa8\x66\xad\xfa\x44\x57\x32\x23\xc5\xe4\x98\x14\x4b\x24\xa5\xb8\x9c\x7c\x22\x2e\x95\xce\xc4\x79\xf9\xe2\xa6\x9f\x68\xad\xbd\xcd\x17\xd2\x95\xf7\xa9\x78\x73\x6e\x9e\xff\x5a\x0a\x29\x35\xb8\x24\x0a\x84\xf9\xee\x21\xd6\x72\x04\x61\xde\x2e\x5b\x56\x95\x29\xd1\x28\x61\x2c\x52\xc4\x11\x56\x56\xb1\x5e\x56\x91\xa4\x1a\xa8\x61\xe3\x22\x93\x8a\xc4\xe4\x34\x6a\xb1\x08\x19\x9b\x83\x8d\x59\x7e\xc8\xb3\xce\xc2\xe4\x25\xf1\x6e\xc1\x2e\x56\xa0\x15\x3e\x0c\x51\xf8\x37\x00\x00\xff\xff\x90\x4d\xf5\x99\x7f\x04\x00\x00")

func configDevYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDevYaml,
		"config.dev.yaml",
	)
}

func configDevYaml() (*asset, error) {
	bytes, err := configDevYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.dev.yaml", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1660322700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configProdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x4f\xdb\x40\x14\xbc\xfb\x57\xac\xe0\xe0\x53\x12\x43\x20\x34\xbe\xa1\xb6\xaa\x10\x88\xa6\xa5\xad\x10\x17\xe4\xc4\x1b\x67\x89\xbd\x9b\xec\xda\x90\x70\xe2\x90\xf2\x51\x29\x05\x95\xa4\xa1\x94\x16\x90\x40\xd0\x03\x81\x56\x2d\x20\x08\xf0\x67\x62\x3b\x39\xf1\x17\xaa\xb5\x1d\x22\x10\x6a\x6f\x7e\xcf\xf3\x66\x67\x66\xdf\x32\x48\x67\x21\x95\x05\x00\x0c\xa2\x42\x19\x88\x2a\x4c\x5a\x9a\x28\x00\xa0\xc2\xb4\x62\xe9\x66\x42\xd1\xe0\x04\x9a\x87\x32\xe8\x93\x40\x2f\x68\x5f\x6e\xb4\xea\x7b\xf6\xf2\x62\x7b\xf7\x8f\xf3\x6d\xd7\xa9\x9e\xf0\x51\xa5\xd0\x85\x0d\x4a\x12\x00\x00\xf4\x02\x67\x6b\xc1\xde\x3b\x78\x00\x4d\x23\x1d\xbe\xcd\xe9\x44\x51\x13\x8a\x99\x91\x81\x18\x8e\x88\x1c\xfb\x79\xa9\x79\x79\xda\x3c\xff\xd0\x6c\xec\xb4\xce\x8e\xed\xeb\x92\x30\x33\x67\x72\x59\x26\xc9\x42\xfc\xbc\x90\x43\x14\xca\xe0\x49\x6c\x40\xf2\xe8\x7b\xfd\x7e\xeb\x66\xc9\xd9\xda\x76\x6a\xa7\xed\xda\xef\x0e\x76\x14\x16\x65\x20\x0e\x5b\x66\x86\x50\x34\xaf\x98\x88\x60\xb1\x83\x77\x37\x4b\xed\x4a\xdd\x5e\x2b\x77\xc0\x23\x8c\x59\x90\xca\x40\xd4\x10\x0e\xa5\xa9\x62\xc0\x39\x42\xb3\xdc\x3e\x83\x29\x0a\x4d\x19\x88\xd1\x99\x57\x13\xaf\xa7\x26\xe1\xe4\x3c\x95\xe2\x99\xbc\xf4\x82\x4e\x59\x63\xf1\x67\x9a\x99\xed\x9f\x7c\x17\x1f\x2e\x88\x82\x4e\x34\xd9\x0b\x2c\x69\x69\x32\x30\xa9\x05\x03\xa3\xe3\x8a\xc1\x23\x35\xf2\x10\x43\xaa\x15\x43\x1a\xf1\xbc\xd6\xf6\xed\x9b\x9a\xef\xd8\x5e\x2b\xbb\x07\x3c\x17\x15\xd1\x20\x10\x6a\x61\x13\x19\x30\xa2\x13\x8d\x75\xe1\x41\xee\x47\x1b\x4e\xe5\xda\xfd\x5a\xb7\xaf\xaa\x82\x51\x64\x79\x9d\x1f\x1c\x02\x19\xc2\xb8\xd4\xbe\xfe\xa1\xb0\x14\x96\xc2\x7d\xdc\x00\x00\x39\x42\x3d\x03\x51\x29\xe6\x37\x2c\xe6\x79\xa5\x84\x98\x01\x42\x61\x6c\x8e\x50\xd5\x9b\x8d\x0e\x0c\x06\x38\x35\x89\x7d\xe5\x1a\xc2\xd3\xf7\x52\x01\x20\x47\x61\x1a\x15\x64\xd0\xd3\xe3\x95\x86\x52\x18\x51\x75\xf8\x94\x60\xcc\x82\x15\x69\xd5\xaf\xdd\xab\xba\xfb\xe3\xa2\x5d\xfb\xd5\xba\xf9\xee\x7c\xdc\x77\x7e\xee\x34\xcf\x8f\xfc\x6f\x77\xb3\xe4\x2f\x86\x53\x3d\x69\x2f\xad\x76\x48\x5e\xe6\x20\xbe\x23\xe9\xb2\x38\x2b\xeb\x76\x63\xc1\xa9\x9e\x38\xe5\xba\x7d\xb1\xfe\x4f\x8a\x31\x94\x86\x6f\x10\xd7\x1d\xeb\x12\x34\x2f\x16\xfd\x21\x7b\xf5\xd8\xde\x2b\xbb\x95\xc3\xee\xb4\xb7\x36\xb7\x8d\x65\xbe\xa2\x9f\xb6\x6f\x1b\x2b\x02\x85\x2a\x62\x3c\xd2\xc7\x02\x0d\xe2\x8c\x45\x87\xe2\x5e\xf9\x58\x76\x6a\x72\xdc\x32\x64\x20\x09\x00\xe8\x44\x43\x38\x11\xa4\x75\x3f\xc9\x69\xef\xdf\x34\xbf\x5d\xf7\xcb\xa5\x7d\x55\x75\x2b\x87\xce\xf2\x99\x7d\xb4\x61\xbf\xdf\xf7\x34\xf8\x5b\xea\x6e\x96\xec\x95\xb2\xdb\x58\x10\x14\x23\x9f\xfb\x8f\xae\xc1\xd8\x50\x3f\x2f\x83\x4b\xd6\x2c\xc8\xcc\x07\x3a\x79\x39\x1b\x50\x88\x02\x61\x9e\x55\x88\xd5\x04\x41\x98\xf7\x32\xa6\x99\x63\x72\x24\x42\x18\x0b\xa5\x70\x88\x65\x14\xac\x65\x14\x14\x56\x74\x54\xb4\x70\x8a\x85\x53\xc4\xe0\x1c\x4a\x2a\x05\x19\x1b\x85\xc5\x91\x0e\xeb\x5d\x67\xa2\xf3\x6c\x78\x37\x69\xa5\xb2\xd0\x0c\x5e\x81\x28\xfc\x0d\x00\x00\xff\xff\x8c\x34\x9a\x3d\x6c\x04\x00\x00")

func configProdYamlBytes() ([]byte, error) {
	return bindataRead(
		_configProdYaml,
		"config.prod.yaml",
	)
}

func configProdYaml() (*asset, error) {
	bytes, err := configProdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.prod.yaml", size: 1132, mode: os.FileMode(420), modTime: time.Unix(1660317416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configTestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x4f\xdb\x40\x14\xbc\xfb\x57\xac\xe0\xe0\x53\x12\x43\x20\x34\xbe\xa1\xb6\xaa\x10\x88\xa6\xa5\xad\x10\x17\xe4\xc4\x1b\x67\x89\xbd\x9b\xec\xda\x90\x70\xe2\x90\xf2\x51\x29\x05\x95\xa4\xa1\x94\x16\x90\x40\xd0\x03\x81\x56\x2d\x20\x08\xf0\x67\x62\x3b\x39\xf1\x17\xaa\xb5\x1d\x22\x10\x6a\x6f\x7e\xcf\xf3\x66\x67\x66\xdf\x32\x48\x67\x21\x95\x05\x00\x0c\xa2\x42\x19\x88\x2a\x4c\x5a\x9a\x28\x00\xa0\xc2\xb4\x62\xe9\x66\x42\xd1\xe0\x04\x9a\x87\x32\xe8\x93\x40\x2f\x68\x5f\x6e\xb4\xea\x7b\xf6\xf2\x62\x7b\xf7\x8f\xf3\x6d\xd7\xa9\x9e\xf0\x51\xa5\xd0\x85\x0d\x4a\x12\x00\x00\xf4\x02\x67\x6b\xc1\xde\x3b\x78\x00\x4d\x23\x1d\xbe\xcd\xe9\x44\x51\x13\x8a\x99\x91\x81\x18\x8e\x88\x1c\xfb\x79\xa9\x79\x79\xda\x3c\xff\xd0\x6c\xec\xb4\xce\x8e\xed\xeb\x92\x30\x33\x67\x72\x59\x26\xc9\x42\xfc\xbc\x90\x43\x14\xca\xe0\x49\x6c\x40\xf2\xe8\x7b\xfd\x7e\xeb\x66\xc9\xd9\xda\x76\x6a\xa7\xed\xda\xef\x0e\x76\x14\x16\x65\x20\x0e\x5b\x66\x86\x50\x34\xaf\x98\x88\x60\xb1\x83\x77\x37\x4b\xed\x4a\xdd\x5e\x2b\x77\xc0\x23\x8c\x59\x90\xca\x40\xd4\x10\x0e\xa5\xa9\x62\xc0\x39\x42\xb3\xdc\x3e\x83\x29\x0a\x4d\x19\x88\xd1\x99\x57\x13\xaf\xa7\x26\xe1\xe4\x3c\x95\xe2\x99\xbc\xf4\x82\x4e\x59\x63\xf1\x67\x9a\x99\xed\x9f\x7c\x17\x1f\x2e\x88\x82\x4e\x34\xd9\x0b\x2c\x69\x69\x32\x30\xa9\x05\x03\xa3\xe3\x8a\xc1\x23\x35\xf2\x10\x43\xaa\x15\x43\x1a\xf1\xbc\xd6\xf6\xed\x9b\x9a\xef\xd8\x5e\x2b\xbb\x07\x3c\x17\x15\xd1\x20\x10\x6a\x61\x13\x19\x30\xa2\x13\x8d\x75\xe1\x41\xee\x47\x1b\x4e\xe5\xda\xfd\x5a\xb7\xaf\xaa\x82\x51\x64\x79\x9d\x1f\x1c\x02\x19\xc2\xb8\xd4\xbe\xfe\xa1\xb0\x14\x96\xc2\x7d\xdc\x00\x00\x39\x42\x3d\x03\x51\x29\xe6\x37\x2c\xe6\x79\xa5\x84\x98\x01\x42\x61\x6c\x8e\x50\xd5\x9b\x8d\x0e\x0c\x06\x38\x35\x89\x7d\xe5\x1a\xc2\xd3\xf7\x52\x01\x20\x47\x61\x1a\x15\x64\xd0\xd3\xe3\x95\x86\x52\x18\x51\x75\xf8\x94\x60\xcc\x82\x15\x69\xd5\xaf\xdd\xab\xba\xfb\xe3\xa2\x5d\xfb\xd5\xba\xf9\xee\x7c\xdc\x77\x7e\xee\x34\xcf\x8f\xfc\x6f\x77\xb3\xe4\x2f\x86\x53\x3d\x69\x2f\xad\x76\x48\x5e\xe6\x20\xbe\x23\xe9\xb2\x38\x2b\xeb\x76\x63\xc1\xa9\x9e\x38\xe5\xba\x7d\xb1\xfe\x4f\x8a\x31\x94\x86\x6f\x10\xd7\x1d\xeb\x12\x34\x2f\x16\xfd\x21\x7b\xf5\xd8\xde\x2b\xbb\x95\xc3\xee\xb4\xb7\x36\xb7\x8d\x65\xbe\xa2\x9f\xb6\x6f\x1b\x2b\x02\x85\x2a\x62\x3c\xd2\xc7\x02\x0d\xe2\x8c\x45\x87\xe2\x5e\xf9\x58\x76\x6a\x72\xdc\x32\x64\x20\x09\x00\xe8\x44\x43\x38\x11\xa4\x75\x3f\xc9\x69\xef\xdf\x34\xbf\x5d\xf7\xcb\xa5\x7d\x55\x75\x2b\x87\xce\xf2\x99\x7d\xb4\x61\xbf\xdf\xf7\x34\xf8\x5b\xea\x6e\x96\xec\x95\xb2\xdb\x58\x10\x14\x23\x9f\xfb\x8f\xae\xc1\xd8\x50\x3f\x2f\x83\x4b\xd6\x2c\xc8\xcc\x07\x3a\x79\x39\x1b\x50\x88\x02\x61\x9e\x55\x88\xd5\x04\x41\x98\xf7\x32\xa6\x99\x63\x72\x24\x42\x18\x0b\xa5\x70\x88\x65\x14\xac\x65\x14\x14\x56\x74\x54\xb4\x70\x8a\x85\x53\xc4\xe0\x1c\x4a\x2a\x05\x19\x1b\x85\xc5\x91\x0e\xeb\x5d\x67\xa2\xf3\x6c\x78\x37\x69\xa5\xb2\xd0\x0c\x5e\x81\x28\xfc\x0d\x00\x00\xff\xff\x8c\x34\x9a\x3d\x6c\x04\x00\x00")

func configTestYamlBytes() ([]byte, error) {
	return bindataRead(
		_configTestYaml,
		"config.test.yaml",
	)
}

func configTestYaml() (*asset, error) {
	bytes, err := configTestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.test.yaml", size: 1132, mode: os.FileMode(420), modTime: time.Unix(1660317421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.dev.yaml":  configDevYaml,
	"config.prod.yaml": configProdYaml,
	"config.test.yaml": configTestYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.dev.yaml":  &bintree{configDevYaml, map[string]*bintree{}},
	"config.prod.yaml": &bintree{configProdYaml, map[string]*bintree{}},
	"config.test.yaml": &bintree{configTestYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
